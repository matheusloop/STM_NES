
STM_NES_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800355c  0800355c  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800355c  0800355c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0000455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003564  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  08003574  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003574  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a00e  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  0000f047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00010ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089f  00000000  00000000  00011810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eff  00000000  00000000  000120af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37f  00000000  00000000  00028fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008745e  00000000  00000000  0003532d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc78b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e84  00000000  00000000  000bc7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000bf654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003518 	.word	0x08003518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003518 	.word	0x08003518

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <cleanRGB_LEDColor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void cleanRGB_LEDColor(uint8_t address){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(address == 1){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d10e      	bne.n	8000676 <cleanRGB_LEDColor+0x2e>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <cleanRGB_LEDColor+0x5c>)
 800065e:	f001 fc2f 	bl	8001ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2120      	movs	r1, #32
 8000666:	480f      	ldr	r0, [pc, #60]	@ (80006a4 <cleanRGB_LEDColor+0x5c>)
 8000668:	f001 fc2a 	bl	8001ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	@ 0x40
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <cleanRGB_LEDColor+0x5c>)
 8000672:	f001 fc25 	bl	8001ec0 <HAL_GPIO_WritePin>
	}
	if(address == 2){
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d10e      	bne.n	800069a <cleanRGB_LEDColor+0x52>
		HAL_GPIO_WritePin(LED2_R_GPIO_Port, LED2_R_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2180      	movs	r1, #128	@ 0x80
 8000680:	4808      	ldr	r0, [pc, #32]	@ (80006a4 <cleanRGB_LEDColor+0x5c>)
 8000682:	f001 fc1d 	bl	8001ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_G_GPIO_Port, LED2_G_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <cleanRGB_LEDColor+0x60>)
 800068c:	f001 fc18 	bl	8001ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2102      	movs	r1, #2
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <cleanRGB_LEDColor+0x60>)
 8000696:	f001 fc13 	bl	8001ec0 <HAL_GPIO_WritePin>
	}
	else{}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00

080006ac <setRGB_LEDColor>:

void setRGB_LEDColor(uint8_t  red, uint8_t  green, uint8_t  blue, uint8_t address){
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4604      	mov	r4, r0
 80006b4:	4608      	mov	r0, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	4623      	mov	r3, r4
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4603      	mov	r3, r0
 80006c0:	71bb      	strb	r3, [r7, #6]
 80006c2:	460b      	mov	r3, r1
 80006c4:	717b      	strb	r3, [r7, #5]
 80006c6:	4613      	mov	r3, r2
 80006c8:	713b      	strb	r3, [r7, #4]

	cleanRGB_LEDColor(address);
 80006ca:	793b      	ldrb	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffbb 	bl	8000648 <cleanRGB_LEDColor>

	if(address == 1){
 80006d2:	793b      	ldrb	r3, [r7, #4]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d117      	bne.n	8000708 <setRGB_LEDColor+0x5c>
		if(red)  {HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, 0);}
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <setRGB_LEDColor+0x3c>
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	4819      	ldr	r0, [pc, #100]	@ (8000748 <setRGB_LEDColor+0x9c>)
 80006e4:	f001 fbec 	bl	8001ec0 <HAL_GPIO_WritePin>
		if(green){HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, 0);}
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <setRGB_LEDColor+0x4c>
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	4815      	ldr	r0, [pc, #84]	@ (8000748 <setRGB_LEDColor+0x9c>)
 80006f4:	f001 fbe4 	bl	8001ec0 <HAL_GPIO_WritePin>
		if(blue) {HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, 0);}
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d004      	beq.n	8000708 <setRGB_LEDColor+0x5c>
 80006fe:	2200      	movs	r2, #0
 8000700:	2140      	movs	r1, #64	@ 0x40
 8000702:	4811      	ldr	r0, [pc, #68]	@ (8000748 <setRGB_LEDColor+0x9c>)
 8000704:	f001 fbdc 	bl	8001ec0 <HAL_GPIO_WritePin>
	}
	if(address == 2){
 8000708:	793b      	ldrb	r3, [r7, #4]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d117      	bne.n	800073e <setRGB_LEDColor+0x92>
		if(red)  {HAL_GPIO_WritePin(LED2_R_GPIO_Port, LED2_R_Pin, 0);}
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d004      	beq.n	800071e <setRGB_LEDColor+0x72>
 8000714:	2200      	movs	r2, #0
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <setRGB_LEDColor+0x9c>)
 800071a:	f001 fbd1 	bl	8001ec0 <HAL_GPIO_WritePin>
		if(green){HAL_GPIO_WritePin(LED2_G_GPIO_Port, LED2_G_Pin, 0);}
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <setRGB_LEDColor+0x82>
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4808      	ldr	r0, [pc, #32]	@ (800074c <setRGB_LEDColor+0xa0>)
 800072a:	f001 fbc9 	bl	8001ec0 <HAL_GPIO_WritePin>
		if(blue) {HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, 0);}
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d004      	beq.n	800073e <setRGB_LEDColor+0x92>
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <setRGB_LEDColor+0xa0>)
 800073a:	f001 fbc1 	bl	8001ec0 <HAL_GPIO_WritePin>
	}
	else{}
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	bf00      	nop
 8000748:	40010800 	.word	0x40010800
 800074c:	40010c00 	.word	0x40010c00

08000750 <PWM_Set>:

void PWM_Set(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t freq, float duty)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	@ 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
    uint32_t timer_clk = HAL_RCC_GetPCLK1Freq(); // ou PCLK2, depende do timer
 800075e:	f001 ffa9 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8000762:	61f8      	str	r0, [r7, #28]
    uint32_t prescaler = htim->Instance->PSC + 1;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800076a:	3301      	adds	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]

    // Calcula ARR a partir da frequência desejada
    uint32_t arr = (timer_clk / (prescaler * freq)) - 1;
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	69fa      	ldr	r2, [r7, #28]
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	3b01      	subs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]

    // Calcula CCR a partir do duty (0.0 a 100.0 %)
    uint32_t ccr = (uint32_t)((duty / 100.0f) * (arr + 1));
 8000780:	491e      	ldr	r1, [pc, #120]	@ (80007fc <PWM_Set+0xac>)
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	f7ff fea4 	bl	80004d0 <__aeabi_fdiv>
 8000788:	4603      	mov	r3, r0
 800078a:	461c      	mov	r4, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd91 	bl	80002b8 <__aeabi_ui2f>
 8000796:	4603      	mov	r3, r0
 8000798:	4619      	mov	r1, r3
 800079a:	4620      	mov	r0, r4
 800079c:	f7ff fde4 	bl	8000368 <__aeabi_fmul>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff30 	bl	8000608 <__aeabi_f2uiz>
 80007a8:	4603      	mov	r3, r0
 80007aa:	613b      	str	r3, [r7, #16]

    // Aplica nos registradores
    __HAL_TIM_SET_AUTORELOAD(htim, arr);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim, channel, ccr);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d104      	bne.n	80007ca <PWM_Set+0x7a>
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007c8:	e013      	b.n	80007f2 <PWM_Set+0xa2>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d104      	bne.n	80007da <PWM_Set+0x8a>
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80007d8:	e00b      	b.n	80007f2 <PWM_Set+0xa2>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d104      	bne.n	80007ea <PWM_Set+0x9a>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80007e8:	e003      	b.n	80007f2 <PWM_Set+0xa2>
    __HAL_TIM_SET_COMPARE(htim, channel, ccr);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f2:	bf00      	nop
 80007f4:	3724      	adds	r7, #36	@ 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	bf00      	nop
 80007fc:	42c80000 	.word	0x42c80000

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fc72 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f89c 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 fa06 	bl	8000c1c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000810:	f000 f926 	bl	8000a60 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000814:	f000 f8e6 	bl	80009e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000818:	f000 f960 	bl	8000adc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800081c:	483f      	ldr	r0, [pc, #252]	@ (800091c <main+0x11c>)
 800081e:	f000 fd9f 	bl	8001360 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000822:	483f      	ldr	r0, [pc, #252]	@ (8000920 <main+0x120>)
 8000824:	f000 fd9c 	bl	8001360 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000828:	2100      	movs	r1, #0
 800082a:	483e      	ldr	r0, [pc, #248]	@ (8000924 <main+0x124>)
 800082c:	f002 f8d2 	bl	80029d4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){

	  if(dir){
 8000830:	4b3d      	ldr	r3, [pc, #244]	@ (8000928 <main+0x128>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01a      	beq.n	800086e <main+0x6e>
		  num2 = adcValue_X/1365;
 8000838:	4b3c      	ldr	r3, [pc, #240]	@ (800092c <main+0x12c>)
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	4b3c      	ldr	r3, [pc, #240]	@ (8000930 <main+0x130>)
 800083e:	fba3 1302 	umull	r1, r3, r3, r2
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	0852      	lsrs	r2, r2, #1
 8000846:	4413      	add	r3, r2
 8000848:	0a9b      	lsrs	r3, r3, #10
 800084a:	b29b      	uxth	r3, r3
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b39      	ldr	r3, [pc, #228]	@ (8000934 <main+0x134>)
 8000850:	701a      	strb	r2, [r3, #0]
		  num1 = adcValue_Y/1365;
 8000852:	4b39      	ldr	r3, [pc, #228]	@ (8000938 <main+0x138>)
 8000854:	881a      	ldrh	r2, [r3, #0]
 8000856:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <main+0x130>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	0852      	lsrs	r2, r2, #1
 8000860:	4413      	add	r3, r2
 8000862:	0a9b      	lsrs	r3, r3, #10
 8000864:	b29b      	uxth	r3, r3
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b34      	ldr	r3, [pc, #208]	@ (800093c <main+0x13c>)
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e019      	b.n	80008a2 <main+0xa2>
	  }
	  else{
		  num1 = adcValue_X/1365;
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <main+0x12c>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <main+0x130>)
 8000874:	fba3 1302 	umull	r1, r3, r3, r2
 8000878:	1ad2      	subs	r2, r2, r3
 800087a:	0852      	lsrs	r2, r2, #1
 800087c:	4413      	add	r3, r2
 800087e:	0a9b      	lsrs	r3, r3, #10
 8000880:	b29b      	uxth	r3, r3
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b2d      	ldr	r3, [pc, #180]	@ (800093c <main+0x13c>)
 8000886:	701a      	strb	r2, [r3, #0]
		  num2 = adcValue_Y/1365;
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <main+0x138>)
 800088a:	881a      	ldrh	r2, [r3, #0]
 800088c:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <main+0x130>)
 800088e:	fba3 1302 	umull	r1, r3, r3, r2
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	0852      	lsrs	r2, r2, #1
 8000896:	4413      	add	r3, r2
 8000898:	0a9b      	lsrs	r3, r3, #10
 800089a:	b29b      	uxth	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <main+0x134>)
 80008a0:	701a      	strb	r2, [r3, #0]
	  }

	  freqPWM = 20 + adcValue_X;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <main+0x12c>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	3314      	adds	r3, #20
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <main+0x140>)
 80008ac:	801a      	strh	r2, [r3, #0]

	  setRGB_LEDColor(num1 == 0, num1 == 1, num1 == 2, 1);
 80008ae:	4b23      	ldr	r3, [pc, #140]	@ (800093c <main+0x13c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf0c      	ite	eq
 80008b6:	2301      	moveq	r3, #1
 80008b8:	2300      	movne	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <main+0x13c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	bf0c      	ite	eq
 80008c6:	2301      	moveq	r3, #1
 80008c8:	2300      	movne	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <main+0x13c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	2301      	movs	r3, #1
 80008e0:	f7ff fee4 	bl	80006ac <setRGB_LEDColor>
	  setRGB_LEDColor(num2 == 0, num2 == 1, num2 == 2, 2);
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <main+0x134>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf0c      	ite	eq
 80008ec:	2301      	moveq	r3, #1
 80008ee:	2300      	movne	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <main+0x134>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	bf0c      	ite	eq
 80008fc:	2301      	moveq	r3, #1
 80008fe:	2300      	movne	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <main+0x134>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	bf0c      	ite	eq
 800090c:	2301      	moveq	r3, #1
 800090e:	2300      	movne	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	2302      	movs	r3, #2
 8000916:	f7ff fec9 	bl	80006ac <setRGB_LEDColor>
	  if(dir){
 800091a:	e789      	b.n	8000830 <main+0x30>
 800091c:	2000002c 	.word	0x2000002c
 8000920:	2000005c 	.word	0x2000005c
 8000924:	2000008c 	.word	0x2000008c
 8000928:	20000000 	.word	0x20000000
 800092c:	200000d6 	.word	0x200000d6
 8000930:	80180181 	.word	0x80180181
 8000934:	200000d5 	.word	0x200000d5
 8000938:	200000d8 	.word	0x200000d8
 800093c:	200000d4 	.word	0x200000d4
 8000940:	20000002 	.word	0x20000002

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094e:	2228      	movs	r2, #40	@ 0x28
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fdb3 	bl	80034be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000974:	2301      	movs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000986:	4618      	mov	r0, r3
 8000988:	f001 faca 	bl	8001f20 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000992:	f000 fa31 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fd37 	bl	8002424 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009bc:	f000 fa1c 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c0:	2302      	movs	r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fea4 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d6:	f000 fa0f 	bl	8000df8 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_ADC1_Init+0x74>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <MX_ADC1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_ADC1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a0e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a22:	f000 fbc5 	bl	80011b0 <HAL_ADC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f9e4 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_ADC1_Init+0x74>)
 8000a42:	f000 fe17 	bl	8001674 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a4c:	f000 f9d4 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	40012400 	.word	0x40012400

08000a60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a72:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <MX_ADC2_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a8a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000a9e:	f000 fb87 	bl	80011b0 <HAL_ADC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f9a6 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_ADC2_Init+0x74>)
 8000abe:	f000 fdd9 	bl	8001674 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000ac8:	f000 f996 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000005c 	.word	0x2000005c
 8000ad8:	40012800 	.word	0x40012800

08000adc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b096      	sub	sp, #88	@ 0x58
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2220      	movs	r2, #32
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fcd2 	bl	80034be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8000c18 <MX_TIM1_Init+0x13c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000b20:	4b3c      	ldr	r3, [pc, #240]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b22:	227f      	movs	r2, #127	@ 0x7f
 8000b24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000b2c:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b2e:	2214      	movs	r2, #20
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b36      	ldr	r3, [pc, #216]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b44:	4833      	ldr	r0, [pc, #204]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b46:	f001 fe9d 	bl	8002884 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b50:	f000 f952 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482c      	ldr	r0, [pc, #176]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b62:	f002 f895 	bl	8002c90 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b6c:	f000 f944 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b70:	4828      	ldr	r0, [pc, #160]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b72:	f001 fed6 	bl	8002922 <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b7c:	f000 f93c 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4821      	ldr	r0, [pc, #132]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000b90:	f002 fbec 	bl	800336c <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b9a:	f000 f92d 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	@ 0x60
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000bc4:	f001 ffa2 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bce:	f000 f913 	bl	8000df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000bf6:	f002 fc11 	bl	800341c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c00:	f000 f8fa 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c04:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <MX_TIM1_Init+0x138>)
 8000c06:	f000 f9c3 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000c0a:	bf00      	nop
 8000c0c:	3758      	adds	r7, #88	@ 0x58
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000008c 	.word	0x2000008c
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a3a      	ldr	r2, [pc, #232]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c36:	f043 0320 	orr.w	r3, r3, #32
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0320 	and.w	r3, r3, #32
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a34      	ldr	r2, [pc, #208]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0x104>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|LED2_R_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	21f0      	movs	r1, #240	@ 0xf0
 8000c7c:	4829      	ldr	r0, [pc, #164]	@ (8000d24 <MX_GPIO_Init+0x108>)
 8000c7e:	f001 f91f 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_G_Pin|LED2_B_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2103      	movs	r1, #3
 8000c86:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <MX_GPIO_Init+0x10c>)
 8000c88:	f001 f91a 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_SW_Pin */
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_GPIO_Init+0x110>)
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4821      	ldr	r0, [pc, #132]	@ (8000d24 <MX_GPIO_Init+0x108>)
 8000ca0:	f000 ff92 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin LED2_R_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|LED2_R_Pin;
 8000ca4:	23f0      	movs	r3, #240	@ 0xf0
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <MX_GPIO_Init+0x108>)
 8000cbc:	f000 ff84 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_G_Pin LED2_B_Pin */
  GPIO_InitStruct.Pin = LED2_G_Pin|LED2_B_Pin;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4814      	ldr	r0, [pc, #80]	@ (8000d28 <MX_GPIO_Init+0x10c>)
 8000cd8:	f000 ff76 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_B_Pin BUTTON_A_Pin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin|BUTTON_A_Pin;
 8000cdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_GPIO_Init+0x110>)
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_GPIO_Init+0x10c>)
 8000cf2:	f000 ff69 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f000 ff2d 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d00:	2008      	movs	r0, #8
 8000d02:	f000 ff46 	bl	8001b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f000 ff25 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d10:	2017      	movs	r0, #23
 8000d12:	f000 ff3e 	bl	8001b92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	10210000 	.word	0x10210000

08000d30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_A_Pin){
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d40:	d108      	bne.n	8000d54 <HAL_GPIO_EXTI_Callback+0x24>
		PWM_Set(&htim1, TIM_CHANNEL_1, freqPWM, 10.0f);
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x64>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d4e:	f7ff fcff 	bl	8000750 <PWM_Set>
		PWM_Set(&htim1, TIM_CHANNEL_1, freqPWM, 0.0f);
	}
	else if(GPIO_Pin == JOY_SW_Pin){
		dir = !dir;
	}
}
 8000d52:	e01a      	b.n	8000d8a <HAL_GPIO_EXTI_Callback+0x5a>
	else if(GPIO_Pin == BUTTON_B_Pin){
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d5a:	d109      	bne.n	8000d70 <HAL_GPIO_EXTI_Callback+0x40>
		PWM_Set(&htim1, TIM_CHANNEL_1, freqPWM, 0.0f);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x64>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d6a:	f7ff fcf1 	bl	8000750 <PWM_Set>
}
 8000d6e:	e00c      	b.n	8000d8a <HAL_GPIO_EXTI_Callback+0x5a>
	else if(GPIO_Pin == JOY_SW_Pin){
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d109      	bne.n	8000d8a <HAL_GPIO_EXTI_Callback+0x5a>
		dir = !dir;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf0c      	ite	eq
 8000d7e:	2301      	moveq	r3, #1
 8000d80:	2300      	movne	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d88:	701a      	strb	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000002 	.word	0x20000002
 8000d98:	41200000 	.word	0x41200000
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	20000000 	.word	0x20000000

08000da4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d107      	bne.n	8000dc6 <HAL_ADC_ConvCpltCallback+0x22>
    	adcValue_X = HAL_ADC_GetValue(hadc);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fb88 	bl	80014cc <HAL_ADC_GetValue>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_ADC_ConvCpltCallback+0x48>)
 8000dc2:	801a      	strh	r2, [r3, #0]
    }
	else if (hadc->Instance == ADC2) {
    	adcValue_Y = HAL_ADC_GetValue(hadc);
    }
}
 8000dc4:	e00b      	b.n	8000dde <HAL_ADC_ConvCpltCallback+0x3a>
	else if (hadc->Instance == ADC2) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d106      	bne.n	8000dde <HAL_ADC_ConvCpltCallback+0x3a>
    	adcValue_Y = HAL_ADC_GetValue(hadc);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fb7b 	bl	80014cc <HAL_ADC_GetValue>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000ddc:	801a      	strh	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012400 	.word	0x40012400
 8000dec:	200000d6 	.word	0x200000d6
 8000df0:	40012800 	.word	0x40012800
 8000df4:	200000d8 	.word	0x200000d8

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a30      	ldr	r2, [pc, #192]	@ (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d12a      	bne.n	8000ede <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e88:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a28      	ldr	r2, [pc, #160]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = JOY_X_Pin;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(JOY_X_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4821      	ldr	r0, [pc, #132]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000ec8:	f000 fe7e 	bl	8001bc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2012      	movs	r0, #18
 8000ed2:	f000 fe42 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ed6:	2012      	movs	r0, #18
 8000ed8:	f000 fe5b 	bl	8001b92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000edc:	e02e      	b.n	8000f3c <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_ADC_MspInit+0xe8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d129      	bne.n	8000f3c <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_ADC_MspInit+0xe0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = JOY_Y_Pin;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(JOY_Y_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <HAL_ADC_MspInit+0xe4>)
 8000f28:	f000 fe4e 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2012      	movs	r0, #18
 8000f32:	f000 fe12 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f36:	2012      	movs	r0, #18
 8000f38:	f000 fe2b 	bl	8001b92 <HAL_NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40012400 	.word	0x40012400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40012800 	.word	0x40012800

08000f54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a09      	ldr	r2, [pc, #36]	@ (8000f88 <HAL_TIM_Base_MspInit+0x34>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10b      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_TIM_MspPostInit+0x5c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d118      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_TIM_MspPostInit+0x60>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_TIM_MspPostInit+0x60>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_TIM_MspPostInit+0x60>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_TIM_MspPostInit+0x64>)
 8000fde:	f000 fdf3 	bl	8001bc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f896 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_SW_Pin);
 8001054:	2004      	movs	r0, #4
 8001056:	f000 ff4b 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <ADC1_2_IRQHandler+0x14>)
 8001066:	f000 fa3d 	bl	80014e4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <ADC1_2_IRQHandler+0x18>)
 800106c:	f000 fa3a 	bl	80014e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000002c 	.word	0x2000002c
 8001078:	2000005c 	.word	0x2000005c

0800107c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_B_Pin);
 8001080:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001084:	f000 ff34 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_A_Pin);
 8001088:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800108c:	f000 ff30 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:
 80010a0:	f7ff fff8 	bl	8001094 <SystemInit>
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <LoopFillZerobss+0xe>)
 80010a6:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
 80010a8:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <LoopFillZerobss+0x16>)
 80010aa:	2300      	movs	r3, #0
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:
 80010ae:	58d4      	ldr	r4, [r2, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:
 80010b4:	18c4      	adds	r4, r0, r3
 80010b6:	428c      	cmp	r4, r1
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <LoopFillZerobss+0x1a>)
 80010bc:	4c09      	ldr	r4, [pc, #36]	@ (80010e4 <LoopFillZerobss+0x1e>)
 80010be:	2300      	movs	r3, #0
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:
 80010c6:	42a2      	cmp	r2, r4
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
 80010ca:	f002 fa01 	bl	80034d0 <__libc_init_array>
 80010ce:	f7ff fb97 	bl	8000800 <main>
 80010d2:	4770      	bx	lr
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000010 	.word	0x20000010
 80010dc:	08003564 	.word	0x08003564
 80010e0:	20000010 	.word	0x20000010
 80010e4:	200000e0 	.word	0x200000e0

080010e8 <CAN1_RX1_IRQHandler>:
 80010e8:	e7fe      	b.n	80010e8 <CAN1_RX1_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fd21 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe7c 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd39 	bl	8001bae <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 fd01 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000004 	.word	0x20000004
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	2000000c 	.word	0x2000000c
 8001198:	200000dc 	.word	0x200000dc

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200000dc 	.word	0x200000dc

080011b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0be      	b.n	8001350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe3a 	bl	8000e68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fb8f 	bl	8001918 <ADC_ConversionStop_Disable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8099 	bne.w	800133e <HAL_ADC_Init+0x18e>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 8095 	bne.w	800133e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	f043 0202 	orr.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001248:	d003      	beq.n	8001252 <HAL_ADC_Init+0xa2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0xa8>
 8001252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001256:	e000      	b.n	800125a <HAL_ADC_Init+0xaa>
 8001258:	2300      	movs	r3, #0
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d1b      	ldrb	r3, [r3, #20]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d119      	bne.n	800129c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	3b01      	subs	r3, #1
 8001276:	035a      	lsls	r2, r3, #13
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e00b      	b.n	800129c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	f043 0220 	orr.w	r2, r3, #32
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <HAL_ADC_Init+0x1a8>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012cc:	d003      	beq.n	80012d6 <HAL_ADC_Init+0x126>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	051b      	lsls	r3, r3, #20
 80012de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_ADC_Init+0x1ac>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10b      	bne.n	800131c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131a:	e018      	b.n	800134e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	f023 0312 	bic.w	r3, r3, #18
 8001324:	f043 0210 	orr.w	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	ffe1f7fd 	.word	0xffe1f7fd
 800135c:	ff1f0efe 	.word	0xff1f0efe

08001360 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Start_IT+0x1a>
 8001376:	2302      	movs	r3, #2
 8001378:	e0a0      	b.n	80014bc <HAL_ADC_Start_IT+0x15c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa6e 	bl	8001864 <ADC_Enable>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 808f 	bne.w	80014b2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_ADC_Start_IT+0x164>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d105      	bne.n	80013be <HAL_ADC_Start_IT+0x5e>
 80013b2:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <HAL_ADC_Start_IT+0x168>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d026      	beq.n	8001426 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e8:	e01d      	b.n	8001426 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <HAL_ADC_Start_IT+0x168>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d004      	beq.n	800140a <HAL_ADC_Start_IT+0xaa>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2f      	ldr	r2, [pc, #188]	@ (80014c4 <HAL_ADC_Start_IT+0x164>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_ADC_Start_IT+0xc6>
 800140a:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_ADC_Start_IT+0x168>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800141e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	f023 0206 	bic.w	r2, r3, #6
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f06f 0202 	mvn.w	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001472:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001476:	d113      	bne.n	80014a0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800147c:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <HAL_ADC_Start_IT+0x164>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d105      	bne.n	800148e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_ADC_Start_IT+0x168>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	e00c      	b.n	80014ba <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e003      	b.n	80014ba <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012800 	.word	0x40012800
 80014c8:	40012400 	.word	0x40012400

080014cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d03e      	beq.n	8001584 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d039      	beq.n	8001584 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001532:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001536:	d11d      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800153c:	2b00      	cmp	r3, #0
 800153e:	d119      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0220 	bic.w	r2, r2, #32
 800154e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc15 	bl	8000da4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f06f 0212 	mvn.w	r2, #18
 8001582:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d04d      	beq.n	800162a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d048      	beq.n	800162a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80015ba:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80015be:	d012      	beq.n	80015e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d125      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015d8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015dc:	d11d      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f9bd 	bl	800199a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 020c 	mvn.w	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f809 	bl	8001662 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0201 	mvn.w	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x20>
 8001690:	2302      	movs	r3, #2
 8001692:	e0dc      	b.n	800184e <HAL_ADC_ConfigChannel+0x1da>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d81c      	bhi.n	80016de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b05      	subs	r3, #5
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	3b05      	subs	r3, #5
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34
 80016dc:	e03c      	b.n	8001758 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d81c      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	@ 0x23
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	4019      	ands	r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b23      	subs	r3, #35	@ 0x23
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	@ 0x30
 800171e:	e01b      	b.n	8001758 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3b41      	subs	r3, #65	@ 0x41
 8001732:	221f      	movs	r2, #31
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	4019      	ands	r1, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3b41      	subs	r3, #65	@ 0x41
 800174c:	fa00 f203 	lsl.w	r2, r0, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d91c      	bls.n	800179a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	3b1e      	subs	r3, #30
 8001772:	2207      	movs	r2, #7
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	4019      	ands	r1, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	3b1e      	subs	r3, #30
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	e019      	b.n	80017ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6919      	ldr	r1, [r3, #16]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4019      	ands	r1, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6898      	ldr	r0, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d003      	beq.n	80017de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017da:	2b11      	cmp	r3, #17
 80017dc:	d132      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_ADC_ConfigChannel+0x1e4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d125      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d126      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001804:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d11a      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_ADC_ConfigChannel+0x1e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <HAL_ADC_ConfigChannel+0x1ec>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9a      	lsrs	r2, r3, #18
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x1b2>
 8001832:	e007      	b.n	8001844 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	f043 0220 	orr.w	r2, r3, #32
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40012400 	.word	0x40012400
 800185c:	20000004 	.word	0x20000004
 8001860:	431bde83 	.word	0x431bde83

08001864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d040      	beq.n	8001904 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <ADC_Enable+0xac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <ADC_Enable+0xb0>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9b      	lsrs	r3, r3, #18
 800189e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018a0:	e002      	b.n	80018a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ae:	f7ff fc75 	bl	800119c <HAL_GetTick>
 80018b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018b4:	e01f      	b.n	80018f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018b6:	f7ff fc71 	bl	800119c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d918      	bls.n	80018f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d011      	beq.n	80018f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	f043 0210 	orr.w	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	f043 0201 	orr.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e007      	b.n	8001906 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d1d8      	bne.n	80018b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000004 	.word	0x20000004
 8001914:	431bde83 	.word	0x431bde83

08001918 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d12e      	bne.n	8001990 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001942:	f7ff fc2b 	bl	800119c <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001948:	e01b      	b.n	8001982 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800194a:	f7ff fc27 	bl	800119c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d914      	bls.n	8001982 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10d      	bne.n	8001982 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e007      	b.n	8001992 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d0dc      	beq.n	800194a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4906      	ldr	r1, [pc, #24]	@ (8001a44 <__NVIC_EnableIRQ+0x34>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	@ (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	@ 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff90 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff2d 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff42 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff90 	bl	8001a9c <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5f 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff35 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	@ 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e161      	b.n	8001ea0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8150 	bne.w	8001e9a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a97      	ldr	r2, [pc, #604]	@ (8001e5c <HAL_GPIO_Init+0x294>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a95      	ldr	r2, [pc, #596]	@ (8001e5c <HAL_GPIO_Init+0x294>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a95      	ldr	r2, [pc, #596]	@ (8001e60 <HAL_GPIO_Init+0x298>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a93      	ldr	r2, [pc, #588]	@ (8001e60 <HAL_GPIO_Init+0x298>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a93      	ldr	r2, [pc, #588]	@ (8001e64 <HAL_GPIO_Init+0x29c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a91      	ldr	r2, [pc, #580]	@ (8001e64 <HAL_GPIO_Init+0x29c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a91      	ldr	r2, [pc, #580]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a8f      	ldr	r2, [pc, #572]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a8f      	ldr	r2, [pc, #572]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a8d      	ldr	r2, [pc, #564]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a76      	ldr	r2, [pc, #472]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	@ 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a9 	beq.w	8001e9a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4a      	ldr	r3, [pc, #296]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a45      	ldr	r2, [pc, #276]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	@ (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1dc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e004      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da0:	2303      	movs	r3, #3
 8001da2:	e002      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da8:	2300      	movs	r3, #0
 8001daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dba:	492f      	ldr	r1, [pc, #188]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	492b      	ldr	r1, [pc, #172]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de2:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4927      	ldr	r1, [pc, #156]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dfc:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4921      	ldr	r1, [pc, #132]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	491d      	ldr	r1, [pc, #116]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4917      	ldr	r1, [pc, #92]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01f      	beq.n	8001e8c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e01f      	b.n	8001e9a <HAL_GPIO_Init+0x2d2>
 8001e5a:	bf00      	nop
 8001e5c:	10320000 	.word	0x10320000
 8001e60:	10310000 	.word	0x10310000
 8001e64:	10220000 	.word	0x10220000
 8001e68:	10210000 	.word	0x10210000
 8001e6c:	10120000 	.word	0x10120000
 8001e70:	10110000 	.word	0x10110000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	@ (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae96 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	@ 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ff0e 	bl	8000d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e272      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8087 	beq.w	800204e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f40:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d00c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d112      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f58:	4b8c      	ldr	r3, [pc, #560]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b89      	ldr	r3, [pc, #548]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06c      	beq.n	800204c <HAL_RCC_OscConfig+0x12c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d168      	bne.n	800204c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e24c      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x76>
 8001f88:	4b80      	ldr	r3, [pc, #512]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7a      	ldr	r2, [pc, #488]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b78      	ldr	r3, [pc, #480]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a77      	ldr	r2, [pc, #476]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0xbc>
 8001fc2:	4b72      	ldr	r3, [pc, #456]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a71      	ldr	r2, [pc, #452]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b68      	ldr	r3, [pc, #416]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f8ce 	bl	800119c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff f8ca 	bl	800119c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e200      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5d      	ldr	r3, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xe4>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f8ba 	bl	800119c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f8b6 	bl	800119c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ec      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x10c>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	4b4c      	ldr	r3, [pc, #304]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002066:	4b49      	ldr	r3, [pc, #292]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
 8002072:	4b46      	ldr	r3, [pc, #280]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1c0      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4939      	ldr	r1, [pc, #228]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f86f 	bl	800119c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f86b 	bl	800119c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1a1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4927      	ldr	r1, [pc, #156]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <HAL_RCC_OscConfig+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f84e 	bl	800119c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7ff f84a 	bl	800119c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e180      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_RCC_OscConfig+0x274>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7ff f82e 	bl	800119c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff f82a 	bl	800119c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e160      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 faba 	bl	80026dc <RCC_Delay>
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_RCC_OscConfig+0x274>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7ff f814 	bl	800119c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7ff f810 	bl	800119c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d908      	bls.n	8002198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e146      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	42420000 	.word	0x42420000
 8002194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b92      	ldr	r3, [pc, #584]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e9      	bne.n	8002178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a6 	beq.w	80022fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b8b      	ldr	r3, [pc, #556]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b88      	ldr	r3, [pc, #544]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a87      	ldr	r2, [pc, #540]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b85      	ldr	r3, [pc, #532]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b82      	ldr	r3, [pc, #520]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7e      	ldr	r2, [pc, #504]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe ffd1 	bl	800119c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe ffcd 	bl	800119c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	@ 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e103      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x312>
 8002224:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a6e      	ldr	r2, [pc, #440]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e02d      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x334>
 800223a:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a69      	ldr	r2, [pc, #420]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b67      	ldr	r3, [pc, #412]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a66      	ldr	r2, [pc, #408]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e01c      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d10c      	bne.n	8002276 <HAL_RCC_OscConfig+0x356>
 800225c:	4b61      	ldr	r3, [pc, #388]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a60      	ldr	r2, [pc, #384]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	4b5e      	ldr	r3, [pc, #376]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e00b      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002276:	4b5b      	ldr	r3, [pc, #364]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a5a      	ldr	r2, [pc, #360]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b58      	ldr	r3, [pc, #352]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a57      	ldr	r2, [pc, #348]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe ff81 	bl	800119c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ff7d 	bl	800119c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0b1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCC_OscConfig+0x37e>
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe ff6b 	bl	800119c <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe ff67 	bl	800119c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e09b      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b3c      	ldr	r3, [pc, #240]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a3b      	ldr	r2, [pc, #236]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8087 	beq.w	8002416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d061      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d146      	bne.n	80023aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe ff3b 	bl	800119c <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe ff37 	bl	800119c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e06d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002352:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4921      	ldr	r1, [pc, #132]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a19      	ldr	r1, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	430b      	orrs	r3, r1
 8002376:	491b      	ldr	r1, [pc, #108]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe ff0b 	bl	800119c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe ff07 	bl	800119c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x46a>
 80023a8:	e035      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fef4 	bl	800119c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fef0 	bl	800119c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e026      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x498>
 80023d6:	e01e      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e019      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x500>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4965      	ldr	r1, [pc, #404]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800248a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe fe42 	bl	800119c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fe3e 	bl	800119c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4922      	ldr	r1, [pc, #136]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fda0 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08003530 	.word	0x08003530
 80025f0:	20000004 	.word	0x20000004
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <HAL_RCC_GetSysClockFreq+0x94>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x30>
 8002622:	2b08      	cmp	r3, #8
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x36>
 8002626:	e027      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800262a:	613b      	str	r3, [r7, #16]
      break;
 800262c:	e027      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0c9b      	lsrs	r3, r3, #18
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_RCC_GetSysClockFreq+0x94>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0c5b      	lsrs	r3, r3, #17
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	fb03 f202 	mul.w	r2, r3, r2
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e004      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_RCC_GetSysClockFreq+0xa4>)
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	613b      	str	r3, [r7, #16]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800267a:	613b      	str	r3, [r7, #16]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	693b      	ldr	r3, [r7, #16]
}
 8002680:	4618      	mov	r0, r3
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	007a1200 	.word	0x007a1200
 8002694:	08003548 	.word	0x08003548
 8002698:	08003558 	.word	0x08003558
 800269c:	003d0900 	.word	0x003d0900

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	@ (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08003540 	.word	0x08003540

080026dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <RCC_Delay+0x34>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <RCC_Delay+0x38>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a5b      	lsrs	r3, r3, #9
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f8:	bf00      	nop
  }
  while (Delay --);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f9      	bne.n	80026f8 <RCC_Delay+0x1c>
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000004 	.word	0x20000004
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07d      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a4b      	ldr	r2, [pc, #300]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274e:	61d3      	str	r3, [r2, #28]
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275c:	2301      	movs	r3, #1
 800275e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b46      	ldr	r3, [pc, #280]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d118      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276c:	4b43      	ldr	r3, [pc, #268]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a42      	ldr	r2, [pc, #264]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002778:	f7fe fd10 	bl	800119c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	e008      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fd0c 	bl	800119c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e06d      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d027      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027d2:	4a29      	ldr	r2, [pc, #164]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fcdb 	bl	800119c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fcd7 	bl	800119c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4917      	ldr	r1, [pc, #92]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	4313      	orrs	r3, r2
 800281c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	490b      	ldr	r1, [pc, #44]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4904      	ldr	r1, [pc, #16]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420440 	.word	0x42420440

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fb52 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 faac 	bl	8002e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e041      	b.n	80029b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f839 	bl	80029c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f000 fa5d 	bl	8002e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x24>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e022      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d109      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e015      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e059      	b.n	8002afa <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x82>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x92>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc4c 	bl	8003324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_TIM_PWM_Start+0x130>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_TIM_PWM_Start+0x130>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIM_PWM_Start+0xf0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIM_PWM_Start+0xf0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <HAL_TIM_PWM_Start+0x134>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d010      	beq.n	8002af8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	e007      	b.n	8002af8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ae      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f200 809f 	bhi.w	8002c78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002c79 	.word	0x08002c79
 8002b48:	08002c79 	.word	0x08002c79
 8002b4c:	08002c79 	.word	0x08002c79
 8002b50:	08002bb5 	.word	0x08002bb5
 8002b54:	08002c79 	.word	0x08002c79
 8002b58:	08002c79 	.word	0x08002c79
 8002b5c:	08002c79 	.word	0x08002c79
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002c79 	.word	0x08002c79
 8002b68:	08002c79 	.word	0x08002c79
 8002b6c:	08002c79 	.word	0x08002c79
 8002b70:	08002c37 	.word	0x08002c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f9b4 	bl	8002ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]
      break;
 8002bb2:	e064      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f9fa 	bl	8002fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e043      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa43 	bl	8003088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
      break;
 8002c34:	e023      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fa8d 	bl	800315c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	61da      	str	r2, [r3, #28]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_ConfigClockSource+0x1c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0b4      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x186>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ce4:	d03e      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0xd4>
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cea:	f200 8087 	bhi.w	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf2:	f000 8086 	beq.w	8002e02 <HAL_TIM_ConfigClockSource+0x172>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfa:	d87f      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b70      	cmp	r3, #112	@ 0x70
 8002cfe:	d01a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xa6>
 8002d00:	2b70      	cmp	r3, #112	@ 0x70
 8002d02:	d87b      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b60      	cmp	r3, #96	@ 0x60
 8002d06:	d050      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x11a>
 8002d08:	2b60      	cmp	r3, #96	@ 0x60
 8002d0a:	d877      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b50      	cmp	r3, #80	@ 0x50
 8002d0e:	d03c      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xfa>
 8002d10:	2b50      	cmp	r3, #80	@ 0x50
 8002d12:	d873      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b40      	cmp	r3, #64	@ 0x40
 8002d16:	d058      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x13a>
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d86f      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b30      	cmp	r3, #48	@ 0x30
 8002d1e:	d064      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d86b      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d060      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d867      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05c      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d05a      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	e062      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d46:	f000 face 	bl	80032e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	609a      	str	r2, [r3, #8]
      break;
 8002d62:	e04f      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d74:	f000 fab7 	bl	80032e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d86:	609a      	str	r2, [r3, #8]
      break;
 8002d88:	e03c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 fa2e 	bl	80031f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2150      	movs	r1, #80	@ 0x50
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa85 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002da8:	e02c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 fa4c 	bl	8003254 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2160      	movs	r1, #96	@ 0x60
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fa75 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e01c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fa0e 	bl	80031f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2140      	movs	r1, #64	@ 0x40
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fa65 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002de8:	e00c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f000 fa5c 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002dfa:	e003      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e000      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <TIM_Base_SetConfig+0xc0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0x28>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x28>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <TIM_Base_SetConfig+0xc4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d108      	bne.n	8002e5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <TIM_Base_SetConfig+0xc0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_Base_SetConfig+0x52>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d003      	beq.n	8002e72 <TIM_Base_SetConfig+0x52>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <TIM_Base_SetConfig+0xc4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <TIM_Base_SetConfig+0xc0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f023 0201 	bic.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 0302 	bic.w	r3, r3, #2
 8002f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <TIM_OC1_SetConfig+0xc8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10c      	bne.n	8002f5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0308 	bic.w	r3, r3, #8
 8002f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 0304 	bic.w	r3, r3, #4
 8002f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a13      	ldr	r2, [pc, #76]	@ (8002fb0 <TIM_OC1_SetConfig+0xc8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d111      	bne.n	8002f8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 0210 	bic.w	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0320 	bic.w	r3, r3, #32
 8002ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <TIM_OC2_SetConfig+0xd0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10d      	bne.n	8003030 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800301a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800302e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <TIM_OC2_SetConfig+0xd0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d113      	bne.n	8003060 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800303e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00

08003088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <TIM_OC3_SetConfig+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10d      	bne.n	8003102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <TIM_OC3_SetConfig+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d113      	bne.n	8003132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00

0800315c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	031b      	lsls	r3, r3, #12
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0f      	ldr	r2, [pc, #60]	@ (80031f4 <TIM_OC4_SetConfig+0x98>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d109      	bne.n	80031d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00

080031f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 030a 	bic.w	r3, r3, #10
 8003234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0210 	bic.w	r2, r3, #16
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800327e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	031b      	lsls	r3, r3, #12
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003290:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b087      	sub	sp, #28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003300:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	431a      	orrs	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4313      	orrs	r3, r2
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2201      	movs	r2, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003380:	2302      	movs	r3, #2
 8003382:	e041      	b.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d0:	d004      	beq.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10c      	bne.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40000400 	.word	0x40000400

0800341c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003434:	2302      	movs	r3, #2
 8003436:	e03d      	b.n	80034b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <memset>:
 80034be:	4603      	mov	r3, r0
 80034c0:	4402      	add	r2, r0
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d100      	bne.n	80034c8 <memset+0xa>
 80034c6:	4770      	bx	lr
 80034c8:	f803 1b01 	strb.w	r1, [r3], #1
 80034cc:	e7f9      	b.n	80034c2 <memset+0x4>
	...

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	2600      	movs	r6, #0
 80034d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003508 <__libc_init_array+0x38>)
 80034d6:	4c0d      	ldr	r4, [pc, #52]	@ (800350c <__libc_init_array+0x3c>)
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	42a6      	cmp	r6, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	f000 f81a 	bl	8003518 <_init>
 80034e4:	2600      	movs	r6, #0
 80034e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003510 <__libc_init_array+0x40>)
 80034e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003514 <__libc_init_array+0x44>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	42a6      	cmp	r6, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f8:	4798      	blx	r3
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003502:	4798      	blx	r3
 8003504:	3601      	adds	r6, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	0800355c 	.word	0x0800355c
 800350c:	0800355c 	.word	0x0800355c
 8003510:	0800355c 	.word	0x0800355c
 8003514:	08003560 	.word	0x08003560

08003518 <_init>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr

08003524 <_fini>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr
